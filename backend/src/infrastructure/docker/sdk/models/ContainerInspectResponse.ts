/* tslint:disable */
/* eslint-disable */
/**
 * Docker Engine API
 * The Engine API is an HTTP API served by Docker Engine. It is the API the Docker client uses to communicate with the Engine, so everything the Docker client can do can be done with the API.  Most of the client\'s commands map directly to API endpoints (e.g. `docker ps` is `GET /containers/json`). The notable exception is running containers, which consists of several API calls.  # Errors  The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be JSON in the following format:  ``` {   \"message\": \"page not found\" } ```  # Versioning  The API is usually changed in each release, so API calls are versioned to ensure that clients don\'t break. To lock to a specific version of the API, you prefix the URL with its version, for example, call `/v1.30/info` to use the v1.30 version of the `/info` endpoint. If the API version specified in the URL is not supported by the daemon, a HTTP `400 Bad Request` error message is returned.  If you omit the version-prefix, the current version of the API (v1.49) is used. For example, calling `/info` is the same as calling `/v1.49/info`. Using the API without a version-prefix is deprecated and will be removed in a future release.  Engine releases in the near future should support this version of the API, so your client will continue to work even if it is talking to a newer Engine.  The API uses an open schema model, which means the server may add extra properties to responses. Likewise, the server will ignore any extra query parameters and request body properties. When you write clients, you need to ignore additional properties in responses to ensure they do not break when talking to newer daemons.   # Authentication  Authentication for registries is handled client side. The client has to send authentication details to various endpoints that need to communicate with registries, such as `POST /images/(name)/push`. These are sent as `X-Registry-Auth` header as a [base64url encoded](https://tools.ietf.org/html/rfc4648#section-5) (JSON) string with the following structure:  ``` {   \"username\": \"string\",   \"password\": \"string\",   \"email\": \"string\",   \"serveraddress\": \"string\" } ```  The `serveraddress` is a domain/IP without a protocol. Throughout this structure, double quotes are required.  If you have already got an identity token from the [`/auth` endpoint](#operation/SystemAuth), you can just pass this instead of credentials:  ``` {   \"identitytoken\": \"9cbaf023786cd7...\" } ``` 
 *
 * The version of the OpenAPI document: 1.49
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ContainerConfig } from './ContainerConfig';
import {
    ContainerConfigFromJSON,
    ContainerConfigFromJSONTyped,
    ContainerConfigToJSON,
    ContainerConfigToJSONTyped,
} from './ContainerConfig';
import type { MountPoint } from './MountPoint';
import {
    MountPointFromJSON,
    MountPointFromJSONTyped,
    MountPointToJSON,
    MountPointToJSONTyped,
} from './MountPoint';
import type { NetworkSettings } from './NetworkSettings';
import {
    NetworkSettingsFromJSON,
    NetworkSettingsFromJSONTyped,
    NetworkSettingsToJSON,
    NetworkSettingsToJSONTyped,
} from './NetworkSettings';
import type { DriverData } from './DriverData';
import {
    DriverDataFromJSON,
    DriverDataFromJSONTyped,
    DriverDataToJSON,
    DriverDataToJSONTyped,
} from './DriverData';
import type { HostConfig } from './HostConfig';
import {
    HostConfigFromJSON,
    HostConfigFromJSONTyped,
    HostConfigToJSON,
    HostConfigToJSONTyped,
} from './HostConfig';
import type { ContainerState } from './ContainerState';
import {
    ContainerStateFromJSON,
    ContainerStateFromJSONTyped,
    ContainerStateToJSON,
    ContainerStateToJSONTyped,
} from './ContainerState';
import type { OCIDescriptor } from './OCIDescriptor';
import {
    OCIDescriptorFromJSON,
    OCIDescriptorFromJSONTyped,
    OCIDescriptorToJSON,
    OCIDescriptorToJSONTyped,
} from './OCIDescriptor';

/**
 * 
 * @export
 * @interface ContainerInspectResponse
 */
export interface ContainerInspectResponse {
    /**
     * The ID of this container as a 128-bit (64-character) hexadecimal string (32 bytes).
     * @type {string}
     * @memberof ContainerInspectResponse
     */
    id?: string;
    /**
     * Date and time at which the container was created, formatted in
     * [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds.
     * @type {string}
     * @memberof ContainerInspectResponse
     */
    created?: string | null;
    /**
     * The path to the command being run
     * @type {string}
     * @memberof ContainerInspectResponse
     */
    path?: string;
    /**
     * The arguments to the command being run
     * @type {Array<string>}
     * @memberof ContainerInspectResponse
     */
    args?: Array<string>;
    /**
     * 
     * @type {ContainerState}
     * @memberof ContainerInspectResponse
     */
    state?: ContainerState | null;
    /**
     * The ID (digest) of the image that this container was created from.
     * @type {string}
     * @memberof ContainerInspectResponse
     */
    image?: string;
    /**
     * Location of the `/etc/resolv.conf` generated for the container on the
     * host.
     * 
     * This file is managed through the docker daemon, and should not be
     * accessed or modified by other tools.
     * @type {string}
     * @memberof ContainerInspectResponse
     */
    resolvConfPath?: string;
    /**
     * Location of the `/etc/hostname` generated for the container on the
     * host.
     * 
     * This file is managed through the docker daemon, and should not be
     * accessed or modified by other tools.
     * @type {string}
     * @memberof ContainerInspectResponse
     */
    hostnamePath?: string;
    /**
     * Location of the `/etc/hosts` generated for the container on the
     * host.
     * 
     * This file is managed through the docker daemon, and should not be
     * accessed or modified by other tools.
     * @type {string}
     * @memberof ContainerInspectResponse
     */
    hostsPath?: string;
    /**
     * Location of the file used to buffer the container's logs. Depending on
     * the logging-driver used for the container, this field may be omitted.
     * 
     * This file is managed through the docker daemon, and should not be
     * accessed or modified by other tools.
     * @type {string}
     * @memberof ContainerInspectResponse
     */
    logPath?: string | null;
    /**
     * The name associated with this container.
     * 
     * For historic reasons, the name may be prefixed with a forward-slash (`/`).
     * @type {string}
     * @memberof ContainerInspectResponse
     */
    name?: string;
    /**
     * Number of times the container was restarted since it was created,
     * or since daemon was started.
     * @type {number}
     * @memberof ContainerInspectResponse
     */
    restartCount?: number;
    /**
     * The storage-driver used for the container's filesystem (graph-driver
     * or snapshotter).
     * @type {string}
     * @memberof ContainerInspectResponse
     */
    driver?: string;
    /**
     * The platform (operating system) for which the container was created.
     * 
     * This field was introduced for the experimental "LCOW" (Linux Containers
     * On Windows) features, which has been removed. In most cases, this field
     * is equal to the host's operating system (`linux` or `windows`).
     * @type {string}
     * @memberof ContainerInspectResponse
     */
    platform?: string;
    /**
     * 
     * @type {OCIDescriptor}
     * @memberof ContainerInspectResponse
     */
    imageManifestDescriptor?: OCIDescriptor;
    /**
     * SELinux mount label set for the container.
     * @type {string}
     * @memberof ContainerInspectResponse
     */
    mountLabel?: string;
    /**
     * SELinux process label set for the container.
     * @type {string}
     * @memberof ContainerInspectResponse
     */
    processLabel?: string;
    /**
     * The AppArmor profile set for the container.
     * @type {string}
     * @memberof ContainerInspectResponse
     */
    appArmorProfile?: string;
    /**
     * IDs of exec instances that are running in the container.
     * @type {Array<string>}
     * @memberof ContainerInspectResponse
     */
    execIDs?: Array<string> | null;
    /**
     * 
     * @type {HostConfig}
     * @memberof ContainerInspectResponse
     */
    hostConfig?: HostConfig;
    /**
     * 
     * @type {DriverData}
     * @memberof ContainerInspectResponse
     */
    graphDriver?: DriverData;
    /**
     * The size of files that have been created or changed by this container.
     * 
     * This field is omitted by default, and only set when size is requested
     * in the API request.
     * @type {number}
     * @memberof ContainerInspectResponse
     */
    sizeRw?: number | null;
    /**
     * The total size of all files in the read-only layers from the image
     * that the container uses. These layers can be shared between containers.
     * 
     * This field is omitted by default, and only set when size is requested
     * in the API request.
     * @type {number}
     * @memberof ContainerInspectResponse
     */
    sizeRootFs?: number | null;
    /**
     * List of mounts used by the container.
     * @type {Array<MountPoint>}
     * @memberof ContainerInspectResponse
     */
    mounts?: Array<MountPoint>;
    /**
     * 
     * @type {ContainerConfig}
     * @memberof ContainerInspectResponse
     */
    config?: ContainerConfig;
    /**
     * 
     * @type {NetworkSettings}
     * @memberof ContainerInspectResponse
     */
    networkSettings?: NetworkSettings;
}

/**
 * Check if a given object implements the ContainerInspectResponse interface.
 */
export function instanceOfContainerInspectResponse(value: object): value is ContainerInspectResponse {
    return true;
}

export function ContainerInspectResponseFromJSON(json: any): ContainerInspectResponse {
    return ContainerInspectResponseFromJSONTyped(json, false);
}

export function ContainerInspectResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): ContainerInspectResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['Id'] == null ? undefined : json['Id'],
        'created': json['Created'] == null ? undefined : json['Created'],
        'path': json['Path'] == null ? undefined : json['Path'],
        'args': json['Args'] == null ? undefined : json['Args'],
        'state': json['State'] == null ? undefined : ContainerStateFromJSON(json['State']),
        'image': json['Image'] == null ? undefined : json['Image'],
        'resolvConfPath': json['ResolvConfPath'] == null ? undefined : json['ResolvConfPath'],
        'hostnamePath': json['HostnamePath'] == null ? undefined : json['HostnamePath'],
        'hostsPath': json['HostsPath'] == null ? undefined : json['HostsPath'],
        'logPath': json['LogPath'] == null ? undefined : json['LogPath'],
        'name': json['Name'] == null ? undefined : json['Name'],
        'restartCount': json['RestartCount'] == null ? undefined : json['RestartCount'],
        'driver': json['Driver'] == null ? undefined : json['Driver'],
        'platform': json['Platform'] == null ? undefined : json['Platform'],
        'imageManifestDescriptor': json['ImageManifestDescriptor'] == null ? undefined : OCIDescriptorFromJSON(json['ImageManifestDescriptor']),
        'mountLabel': json['MountLabel'] == null ? undefined : json['MountLabel'],
        'processLabel': json['ProcessLabel'] == null ? undefined : json['ProcessLabel'],
        'appArmorProfile': json['AppArmorProfile'] == null ? undefined : json['AppArmorProfile'],
        'execIDs': json['ExecIDs'] == null ? undefined : json['ExecIDs'],
        'hostConfig': json['HostConfig'] == null ? undefined : HostConfigFromJSON(json['HostConfig']),
        'graphDriver': json['GraphDriver'] == null ? undefined : DriverDataFromJSON(json['GraphDriver']),
        'sizeRw': json['SizeRw'] == null ? undefined : json['SizeRw'],
        'sizeRootFs': json['SizeRootFs'] == null ? undefined : json['SizeRootFs'],
        'mounts': json['Mounts'] == null ? undefined : ((json['Mounts'] as Array<any>).map(MountPointFromJSON)),
        'config': json['Config'] == null ? undefined : ContainerConfigFromJSON(json['Config']),
        'networkSettings': json['NetworkSettings'] == null ? undefined : NetworkSettingsFromJSON(json['NetworkSettings']),
    };
}

export function ContainerInspectResponseToJSON(json: any): ContainerInspectResponse {
    return ContainerInspectResponseToJSONTyped(json, false);
}

export function ContainerInspectResponseToJSONTyped(value?: ContainerInspectResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'Id': value['id'],
        'Created': value['created'],
        'Path': value['path'],
        'Args': value['args'],
        'State': ContainerStateToJSON(value['state']),
        'Image': value['image'],
        'ResolvConfPath': value['resolvConfPath'],
        'HostnamePath': value['hostnamePath'],
        'HostsPath': value['hostsPath'],
        'LogPath': value['logPath'],
        'Name': value['name'],
        'RestartCount': value['restartCount'],
        'Driver': value['driver'],
        'Platform': value['platform'],
        'ImageManifestDescriptor': OCIDescriptorToJSON(value['imageManifestDescriptor']),
        'MountLabel': value['mountLabel'],
        'ProcessLabel': value['processLabel'],
        'AppArmorProfile': value['appArmorProfile'],
        'ExecIDs': value['execIDs'],
        'HostConfig': HostConfigToJSON(value['hostConfig']),
        'GraphDriver': DriverDataToJSON(value['graphDriver']),
        'SizeRw': value['sizeRw'],
        'SizeRootFs': value['sizeRootFs'],
        'Mounts': value['mounts'] == null ? undefined : ((value['mounts'] as Array<any>).map(MountPointToJSON)),
        'Config': ContainerConfigToJSON(value['config']),
        'NetworkSettings': NetworkSettingsToJSON(value['networkSettings']),
    };
}


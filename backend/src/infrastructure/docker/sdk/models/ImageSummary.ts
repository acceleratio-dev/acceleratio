/* tslint:disable */
/* eslint-disable */
/**
 * Docker Engine API
 * The Engine API is an HTTP API served by Docker Engine. It is the API the Docker client uses to communicate with the Engine, so everything the Docker client can do can be done with the API.  Most of the client\'s commands map directly to API endpoints (e.g. `docker ps` is `GET /containers/json`). The notable exception is running containers, which consists of several API calls.  # Errors  The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be JSON in the following format:  ``` {   \"message\": \"page not found\" } ```  # Versioning  The API is usually changed in each release, so API calls are versioned to ensure that clients don\'t break. To lock to a specific version of the API, you prefix the URL with its version, for example, call `/v1.30/info` to use the v1.30 version of the `/info` endpoint. If the API version specified in the URL is not supported by the daemon, a HTTP `400 Bad Request` error message is returned.  If you omit the version-prefix, the current version of the API (v1.49) is used. For example, calling `/info` is the same as calling `/v1.49/info`. Using the API without a version-prefix is deprecated and will be removed in a future release.  Engine releases in the near future should support this version of the API, so your client will continue to work even if it is talking to a newer Engine.  The API uses an open schema model, which means the server may add extra properties to responses. Likewise, the server will ignore any extra query parameters and request body properties. When you write clients, you need to ignore additional properties in responses to ensure they do not break when talking to newer daemons.   # Authentication  Authentication for registries is handled client side. The client has to send authentication details to various endpoints that need to communicate with registries, such as `POST /images/(name)/push`. These are sent as `X-Registry-Auth` header as a [base64url encoded](https://tools.ietf.org/html/rfc4648#section-5) (JSON) string with the following structure:  ``` {   \"username\": \"string\",   \"password\": \"string\",   \"email\": \"string\",   \"serveraddress\": \"string\" } ```  The `serveraddress` is a domain/IP without a protocol. Throughout this structure, double quotes are required.  If you have already got an identity token from the [`/auth` endpoint](#operation/SystemAuth), you can just pass this instead of credentials:  ``` {   \"identitytoken\": \"9cbaf023786cd7...\" } ``` 
 *
 * The version of the OpenAPI document: 1.49
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ImageManifestSummary } from './ImageManifestSummary';
import {
    ImageManifestSummaryFromJSON,
    ImageManifestSummaryFromJSONTyped,
    ImageManifestSummaryToJSON,
    ImageManifestSummaryToJSONTyped,
} from './ImageManifestSummary';
import type { OCIDescriptor } from './OCIDescriptor';
import {
    OCIDescriptorFromJSON,
    OCIDescriptorFromJSONTyped,
    OCIDescriptorToJSON,
    OCIDescriptorToJSONTyped,
} from './OCIDescriptor';

/**
 * 
 * @export
 * @interface ImageSummary
 */
export interface ImageSummary {
    /**
     * ID is the content-addressable ID of an image.
     * 
     * This identifier is a content-addressable digest calculated from the
     * image's configuration (which includes the digests of layers used by
     * the image).
     * 
     * Note that this digest differs from the `RepoDigests` below, which
     * holds digests of image manifests that reference the image.
     * 
     * @type {string}
     * @memberof ImageSummary
     */
    id: string;
    /**
     * ID of the parent image.
     * 
     * Depending on how the image was created, this field may be empty and
     * is only set for images that were built/created locally. This field
     * is empty if the image was pulled from an image registry.
     * 
     * @type {string}
     * @memberof ImageSummary
     */
    parentId: string;
    /**
     * List of image names/tags in the local image cache that reference this
     * image.
     * 
     * Multiple image tags can refer to the same image, and this list may be
     * empty if no tags reference the image, in which case the image is
     * "untagged", in which case it can still be referenced by its ID.
     * 
     * @type {Array<string>}
     * @memberof ImageSummary
     */
    repoTags: Array<string>;
    /**
     * List of content-addressable digests of locally available image manifests
     * that the image is referenced from. Multiple manifests can refer to the
     * same image.
     * 
     * These digests are usually only available if the image was either pulled
     * from a registry, or if the image was pushed to a registry, which is when
     * the manifest is generated and its digest calculated.
     * 
     * @type {Array<string>}
     * @memberof ImageSummary
     */
    repoDigests: Array<string>;
    /**
     * Date and time at which the image was created as a Unix timestamp
     * (number of seconds since EPOCH).
     * 
     * @type {number}
     * @memberof ImageSummary
     */
    created: number;
    /**
     * Total size of the image including all layers it is composed of.
     * 
     * @type {number}
     * @memberof ImageSummary
     */
    size: number;
    /**
     * Total size of image layers that are shared between this image and other
     * images.
     * 
     * This size is not calculated by default. `-1` indicates that the value
     * has not been set / calculated.
     * 
     * @type {number}
     * @memberof ImageSummary
     */
    sharedSize: number;
    /**
     * Total size of the image including all layers it is composed of.
     * 
     * Deprecated: this field is omitted in API v1.44, but kept for backward compatibility. Use Size instead.
     * @type {number}
     * @memberof ImageSummary
     */
    virtualSize?: number;
    /**
     * User-defined key/value metadata.
     * @type {{ [key: string]: string; }}
     * @memberof ImageSummary
     */
    labels: { [key: string]: string; };
    /**
     * Number of containers using this image. Includes both stopped and running
     * containers.
     * 
     * This size is not calculated by default, and depends on which API endpoint
     * is used. `-1` indicates that the value has not been set / calculated.
     * 
     * @type {number}
     * @memberof ImageSummary
     */
    containers: number;
    /**
     * Manifests is a list of manifests available in this image.
     * It provides a more detailed view of the platform-specific image manifests
     * or other image-attached data like build attestations.
     * 
     * WARNING: This is experimental and may change at any time without any backward
     * compatibility.
     * 
     * @type {Array<ImageManifestSummary>}
     * @memberof ImageSummary
     */
    manifests?: Array<ImageManifestSummary>;
    /**
     * 
     * @type {OCIDescriptor}
     * @memberof ImageSummary
     */
    descriptor?: OCIDescriptor;
}

/**
 * Check if a given object implements the ImageSummary interface.
 */
export function instanceOfImageSummary(value: object): value is ImageSummary {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('parentId' in value) || value['parentId'] === undefined) return false;
    if (!('repoTags' in value) || value['repoTags'] === undefined) return false;
    if (!('repoDigests' in value) || value['repoDigests'] === undefined) return false;
    if (!('created' in value) || value['created'] === undefined) return false;
    if (!('size' in value) || value['size'] === undefined) return false;
    if (!('sharedSize' in value) || value['sharedSize'] === undefined) return false;
    if (!('labels' in value) || value['labels'] === undefined) return false;
    if (!('containers' in value) || value['containers'] === undefined) return false;
    return true;
}

export function ImageSummaryFromJSON(json: any): ImageSummary {
    return ImageSummaryFromJSONTyped(json, false);
}

export function ImageSummaryFromJSONTyped(json: any, ignoreDiscriminator: boolean): ImageSummary {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['Id'],
        'parentId': json['ParentId'],
        'repoTags': json['RepoTags'],
        'repoDigests': json['RepoDigests'],
        'created': json['Created'],
        'size': json['Size'],
        'sharedSize': json['SharedSize'],
        'virtualSize': json['VirtualSize'] == null ? undefined : json['VirtualSize'],
        'labels': json['Labels'],
        'containers': json['Containers'],
        'manifests': json['Manifests'] == null ? undefined : ((json['Manifests'] as Array<any>).map(ImageManifestSummaryFromJSON)),
        'descriptor': json['Descriptor'] == null ? undefined : OCIDescriptorFromJSON(json['Descriptor']),
    };
}

export function ImageSummaryToJSON(json: any): ImageSummary {
    return ImageSummaryToJSONTyped(json, false);
}

export function ImageSummaryToJSONTyped(value?: ImageSummary | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'Id': value['id'],
        'ParentId': value['parentId'],
        'RepoTags': value['repoTags'],
        'RepoDigests': value['repoDigests'],
        'Created': value['created'],
        'Size': value['size'],
        'SharedSize': value['sharedSize'],
        'VirtualSize': value['virtualSize'],
        'Labels': value['labels'],
        'Containers': value['containers'],
        'Manifests': value['manifests'] == null ? undefined : ((value['manifests'] as Array<any>).map(ImageManifestSummaryToJSON)),
        'Descriptor': OCIDescriptorToJSON(value['descriptor']),
    };
}


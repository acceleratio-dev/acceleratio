/* tslint:disable */
/* eslint-disable */
/**
 * Docker Engine API
 * The Engine API is an HTTP API served by Docker Engine. It is the API the Docker client uses to communicate with the Engine, so everything the Docker client can do can be done with the API.  Most of the client\'s commands map directly to API endpoints (e.g. `docker ps` is `GET /containers/json`). The notable exception is running containers, which consists of several API calls.  # Errors  The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be JSON in the following format:  ``` {   \"message\": \"page not found\" } ```  # Versioning  The API is usually changed in each release, so API calls are versioned to ensure that clients don\'t break. To lock to a specific version of the API, you prefix the URL with its version, for example, call `/v1.30/info` to use the v1.30 version of the `/info` endpoint. If the API version specified in the URL is not supported by the daemon, a HTTP `400 Bad Request` error message is returned.  If you omit the version-prefix, the current version of the API (v1.49) is used. For example, calling `/info` is the same as calling `/v1.49/info`. Using the API without a version-prefix is deprecated and will be removed in a future release.  Engine releases in the near future should support this version of the API, so your client will continue to work even if it is talking to a newer Engine.  The API uses an open schema model, which means the server may add extra properties to responses. Likewise, the server will ignore any extra query parameters and request body properties. When you write clients, you need to ignore additional properties in responses to ensure they do not break when talking to newer daemons.   # Authentication  Authentication for registries is handled client side. The client has to send authentication details to various endpoints that need to communicate with registries, such as `POST /images/(name)/push`. These are sent as `X-Registry-Auth` header as a [base64url encoded](https://tools.ietf.org/html/rfc4648#section-5) (JSON) string with the following structure:  ``` {   \"username\": \"string\",   \"password\": \"string\",   \"email\": \"string\",   \"serveraddress\": \"string\" } ```  The `serveraddress` is a domain/IP without a protocol. Throughout this structure, double quotes are required.  If you have already got an identity token from the [`/auth` endpoint](#operation/SystemAuth), you can just pass this instead of credentials:  ``` {   \"identitytoken\": \"9cbaf023786cd7...\" } ``` 
 *
 * The version of the OpenAPI document: 1.49
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { OCIPlatform } from './OCIPlatform';
import {
    OCIPlatformFromJSON,
    OCIPlatformFromJSONTyped,
    OCIPlatformToJSON,
    OCIPlatformToJSONTyped,
} from './OCIPlatform';

/**
 * A descriptor struct containing digest, media type, and size, as defined in
 * the [OCI Content Descriptors Specification](https://github.com/opencontainers/image-spec/blob/v1.0.1/descriptor.md).
 * 
 * @export
 * @interface OCIDescriptor
 */
export interface OCIDescriptor {
    /**
     * The media type of the object this schema refers to.
     * 
     * @type {string}
     * @memberof OCIDescriptor
     */
    mediaType?: string;
    /**
     * The digest of the targeted content.
     * 
     * @type {string}
     * @memberof OCIDescriptor
     */
    digest?: string;
    /**
     * The size in bytes of the blob.
     * 
     * @type {number}
     * @memberof OCIDescriptor
     */
    size?: number;
    /**
     * List of URLs from which this object MAY be downloaded.
     * @type {Array<string>}
     * @memberof OCIDescriptor
     */
    urls?: Array<string> | null;
    /**
     * Arbitrary metadata relating to the targeted content.
     * @type {{ [key: string]: string; }}
     * @memberof OCIDescriptor
     */
    annotations?: { [key: string]: string; } | null;
    /**
     * Data is an embedding of the targeted content. This is encoded as a base64
     * string when marshalled to JSON (automatically, by encoding/json). If
     * present, Data can be used directly to avoid fetching the targeted content.
     * @type {string}
     * @memberof OCIDescriptor
     */
    data?: string | null;
    /**
     * 
     * @type {OCIPlatform}
     * @memberof OCIDescriptor
     */
    platform?: OCIPlatform | null;
    /**
     * ArtifactType is the IANA media type of this artifact.
     * @type {string}
     * @memberof OCIDescriptor
     */
    artifactType?: string | null;
}

/**
 * Check if a given object implements the OCIDescriptor interface.
 */
export function instanceOfOCIDescriptor(value: object): value is OCIDescriptor {
    return true;
}

export function OCIDescriptorFromJSON(json: any): OCIDescriptor {
    return OCIDescriptorFromJSONTyped(json, false);
}

export function OCIDescriptorFromJSONTyped(json: any, ignoreDiscriminator: boolean): OCIDescriptor {
    if (json == null) {
        return json;
    }
    return {
        
        'mediaType': json['mediaType'] == null ? undefined : json['mediaType'],
        'digest': json['digest'] == null ? undefined : json['digest'],
        'size': json['size'] == null ? undefined : json['size'],
        'urls': json['urls'] == null ? undefined : json['urls'],
        'annotations': json['annotations'] == null ? undefined : json['annotations'],
        'data': json['data'] == null ? undefined : json['data'],
        'platform': json['platform'] == null ? undefined : OCIPlatformFromJSON(json['platform']),
        'artifactType': json['artifactType'] == null ? undefined : json['artifactType'],
    };
}

export function OCIDescriptorToJSON(json: any): OCIDescriptor {
    return OCIDescriptorToJSONTyped(json, false);
}

export function OCIDescriptorToJSONTyped(value?: OCIDescriptor | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'mediaType': value['mediaType'],
        'digest': value['digest'],
        'size': value['size'],
        'urls': value['urls'],
        'annotations': value['annotations'],
        'data': value['data'],
        'platform': OCIPlatformToJSON(value['platform']),
        'artifactType': value['artifactType'],
    };
}


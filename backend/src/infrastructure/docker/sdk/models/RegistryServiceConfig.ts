/* tslint:disable */
/* eslint-disable */
/**
 * Docker Engine API
 * The Engine API is an HTTP API served by Docker Engine. It is the API the Docker client uses to communicate with the Engine, so everything the Docker client can do can be done with the API.  Most of the client\'s commands map directly to API endpoints (e.g. `docker ps` is `GET /containers/json`). The notable exception is running containers, which consists of several API calls.  # Errors  The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be JSON in the following format:  ``` {   \"message\": \"page not found\" } ```  # Versioning  The API is usually changed in each release, so API calls are versioned to ensure that clients don\'t break. To lock to a specific version of the API, you prefix the URL with its version, for example, call `/v1.30/info` to use the v1.30 version of the `/info` endpoint. If the API version specified in the URL is not supported by the daemon, a HTTP `400 Bad Request` error message is returned.  If you omit the version-prefix, the current version of the API (v1.49) is used. For example, calling `/info` is the same as calling `/v1.49/info`. Using the API without a version-prefix is deprecated and will be removed in a future release.  Engine releases in the near future should support this version of the API, so your client will continue to work even if it is talking to a newer Engine.  The API uses an open schema model, which means the server may add extra properties to responses. Likewise, the server will ignore any extra query parameters and request body properties. When you write clients, you need to ignore additional properties in responses to ensure they do not break when talking to newer daemons.   # Authentication  Authentication for registries is handled client side. The client has to send authentication details to various endpoints that need to communicate with registries, such as `POST /images/(name)/push`. These are sent as `X-Registry-Auth` header as a [base64url encoded](https://tools.ietf.org/html/rfc4648#section-5) (JSON) string with the following structure:  ``` {   \"username\": \"string\",   \"password\": \"string\",   \"email\": \"string\",   \"serveraddress\": \"string\" } ```  The `serveraddress` is a domain/IP without a protocol. Throughout this structure, double quotes are required.  If you have already got an identity token from the [`/auth` endpoint](#operation/SystemAuth), you can just pass this instead of credentials:  ``` {   \"identitytoken\": \"9cbaf023786cd7...\" } ``` 
 *
 * The version of the OpenAPI document: 1.49
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { IndexInfo } from './IndexInfo';
import {
    IndexInfoFromJSON,
    IndexInfoFromJSONTyped,
    IndexInfoToJSON,
    IndexInfoToJSONTyped,
} from './IndexInfo';

/**
 * RegistryServiceConfig stores daemon registry services configuration.
 * 
 * @export
 * @interface RegistryServiceConfig
 */
export interface RegistryServiceConfig {
    /**
     * List of IP ranges of insecure registries, using the CIDR syntax
     * ([RFC 4632](https://tools.ietf.org/html/4632)). Insecure registries
     * accept un-encrypted (HTTP) and/or untrusted (HTTPS with certificates
     * from unknown CAs) communication.
     * 
     * By default, local registries (`::1/128` and `127.0.0.0/8`) are configured as
     * insecure. All other registries are secure. Communicating with an
     * insecure registry is not possible if the daemon assumes that registry
     * is secure.
     * 
     * This configuration override this behavior, insecure communication with
     * registries whose resolved IP address is within the subnet described by
     * the CIDR syntax.
     * 
     * Registries can also be marked insecure by hostname. Those registries
     * are listed under `IndexConfigs` and have their `Secure` field set to
     * `false`.
     * 
     * > **Warning**: Using this option can be useful when running a local
     * > registry, but introduces security vulnerabilities. This option
     * > should therefore ONLY be used for testing purposes. For increased
     * > security, users should add their CA to their system's list of trusted
     * > CAs instead of enabling this option.
     * 
     * @type {Array<string>}
     * @memberof RegistryServiceConfig
     */
    insecureRegistryCIDRs?: Array<string>;
    /**
     * 
     * @type {{ [key: string]: IndexInfo; }}
     * @memberof RegistryServiceConfig
     */
    indexConfigs?: { [key: string]: IndexInfo; };
    /**
     * List of registry URLs that act as a mirror for the official
     * (`docker.io`) registry.
     * 
     * @type {Array<string>}
     * @memberof RegistryServiceConfig
     */
    mirrors?: Array<string>;
}

/**
 * Check if a given object implements the RegistryServiceConfig interface.
 */
export function instanceOfRegistryServiceConfig(value: object): value is RegistryServiceConfig {
    return true;
}

export function RegistryServiceConfigFromJSON(json: any): RegistryServiceConfig {
    return RegistryServiceConfigFromJSONTyped(json, false);
}

export function RegistryServiceConfigFromJSONTyped(json: any, ignoreDiscriminator: boolean): RegistryServiceConfig {
    if (json == null) {
        return json;
    }
    return {
        
        'insecureRegistryCIDRs': json['InsecureRegistryCIDRs'] == null ? undefined : json['InsecureRegistryCIDRs'],
        'indexConfigs': json['IndexConfigs'] == null ? undefined : (mapValues(json['IndexConfigs'], IndexInfoFromJSON)),
        'mirrors': json['Mirrors'] == null ? undefined : json['Mirrors'],
    };
}

export function RegistryServiceConfigToJSON(json: any): RegistryServiceConfig {
    return RegistryServiceConfigToJSONTyped(json, false);
}

export function RegistryServiceConfigToJSONTyped(value?: RegistryServiceConfig | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'InsecureRegistryCIDRs': value['insecureRegistryCIDRs'],
        'IndexConfigs': value['indexConfigs'] == null ? undefined : (mapValues(value['indexConfigs'], IndexInfoToJSON)),
        'Mirrors': value['mirrors'],
    };
}

